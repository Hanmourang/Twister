"""
<title>DeleteNonexistingFlow</title>
<description>Request deletion of non-existing flow
</description>
"""

try:
    if('TWISTER_ENV' in globals()):
        from ce_libs.openflow.of_13.openflow_base import *
        testbed=currentTB
        from ce_libs import ra_proxy
        ra_service=ra_proxy                        
except:
    raise

class DeleteNonexistingFlow(SimpleDataPlane):

    """Request deletion of non-existing flow"""

    def runTest(self):

        self.logger.info("Delete_NonExisting_Flow test begins")
        self.logger.info("Delete a non-existing flow, verify error is returned")
        of_ports = self.port_map.keys()
        of_ports.sort()
        self.assertTrue(len(of_ports) > 0, "Not enough ports for test")
        self.logger.info("Clear the switch state, delete all flows")
        rc = testutils.delete_all_flows(self.controller, self.logger)
        self.assertEqual(rc, 0, "Failed to delete all flows")

        self.logger.info("Expecting switch to ignore the command , without generating errors")

        # Issue a delete command
        msg = message.flow_mod()
        msg.out_port = of_ports[1]
        msg.command = ofp.OFPFC_DELETE
        msg.buffer_id = 0xffffffff
        self.controller.message_send(msg)

        # Verify no message or error is generated by polling the the control plane
        (response, pkt) = self.controller.poll(exp_msg=ofp.OFPT_ERROR,
                                               timeout=2)
        self.assertTrue(response is None,
                        'Recieved Error for deleting non-exiting flow ')

    
tc = DeleteNonexistingFlow()
_RESULT = tc.run()
